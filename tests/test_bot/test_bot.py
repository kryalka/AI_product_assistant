import pytest
import pytest_asyncio
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


@pytest_asyncio.fixture
async def bot_client():
    class MockBotClient:
        def __init__(self):
            self.chat_id = 12345

        async def send_command(self, command):
            if command == "/start":
                return MockResponse(
                    text="–Ø ‚Äî –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üçé –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="shopping")]
                        ]
                    )
                )
            return MockResponse(text="")

        async def send_callback_query(self, callback_data):
            if callback_data == "shopping":
                return MockResponse(text="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            elif callback_data.startswith("delete_cart:"):
                cart_name = callback_data.split(":")[1]
                return MockResponse(text=f"–ö–æ—Ä–∑–∏–Ω–∞ '{cart_name}' —É–¥–∞–ª–µ–Ω–∞.")
            return MockResponse(text="")

        async def send_message(self, message):
            if message == "":
                return MockResponse(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã.")
            return MockResponse(text=f"–ö–æ—Ä–∑–∏–Ω–∞ '{message}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    class MockResponse:
        def __init__(self, text, reply_markup=None):
            self.text = text
            self.reply_markup = reply_markup

    return MockBotClient()


@pytest.mark.asyncio
async def test_start(bot_client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    response = await bot_client.send_command("/start")
    assert "–Ø ‚Äî –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫" in response.text
    assert any(isinstance(button, InlineKeyboardButton) and "üçé –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" in button.text
               for button in response.reply_markup.inline_keyboard[0])


@pytest.mark.asyncio
async def test_shopping_process(bot_client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'shopping' –∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    response = await bot_client.send_callback_query("shopping")
    assert response.text == "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."


@pytest.mark.asyncio
async def test_favorites_workflow(bot_client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
    chat_id = bot_client.chat_id

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    response = await bot_client.send_message("–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")
    assert "–ö–æ—Ä–∑–∏–Ω–∞ '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!" in response.text

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    response = await bot_client.send_callback_query("delete_cart:–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")
    assert "–ö–æ—Ä–∑–∏–Ω–∞ '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞' —É–¥–∞–ª–µ–Ω–∞." in response.text


@pytest.mark.asyncio
async def test_invalid_input(bot_client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞."""
    response = await bot_client.send_message("")
    assert "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã." in response.text